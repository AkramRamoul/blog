generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Account {
  id String @id @default(uuid()) // Use UUID for id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // No `@db.String` needed for PostgreSQL
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category {
  id          String  @id @default(cuid())
  slug        String  @unique
  title       String?
  img         String?
  posts       Post[]
}

model Post {
  id          String  @id @default(cuid())
  slug        String  @unique
  title       String
  desc        String
  img         String?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  catSlug     String 
  category    Category @relation(fields: [catSlug], references: [slug])
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email])
  comments    Comment[]
}

model Comment {
  id  String  @id @default(cuid())
  createdAt  DateTime @default(now())
  content String
  userEmail String
  postSlug String
  user User @relation(fields: [userEmail], references: [email])
  post Post @relation(fields: [postSlug], references: [slug])
}